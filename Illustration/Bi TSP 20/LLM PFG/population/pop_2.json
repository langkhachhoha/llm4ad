[
     {
          "algorithm": "{Choose the solution with the best trade-off in both objectives and apply a segment relocation strategy.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]  # Minimizing the sum of objectives\n    best_tour = best_solution.copy()\n    \n    # Step 2: Apply a segment relocation heuristic\n    n = len(best_tour)\n    \n    # Randomly select a segment to relocate\n    segment_start = np.random.randint(0, n)\n    segment_length = np.random.randint(1, n // 2)  # Length of the segment to relocate (1 to n//2)\n    \n    segment_end = (segment_start + segment_length) % n\n    segment = best_tour[segment_start:segment_end]\n    \n    # Remove the segment from the tour\n    remaining_tour = np.concatenate((best_tour[:segment_start], best_tour[segment_end:]))\n    \n    # Insert the segment back into the tour at a new position\n    insert_position = np.random.randint(0, len(remaining_tour) + 1)\n    new_tour = np.insert(remaining_tour, insert_position, segment)\n    \n    return new_tour\n\n",
          "score": [
               -277.16016416614025,
               0.3989095091819763
          ]
     },
     {
          "algorithm": "{Select the solution from the archive that has the lowest combined cost in both objective spaces, and then apply a segment relocation strategy to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    selected_solution = min(archive, key=lambda s: s[1][0] + s[1][1])[0]\n    \n    # Convert to list for manipulation\n    selected_solution = selected_solution.tolist()\n    n = len(selected_solution)\n    \n    # Implementing a segment relocation strategy\n    # Randomly choose a segment of the tour to relocate\n    start = np.random.randint(0, n)\n    end = np.random.randint(start + 1, n + 1)  # end is exclusive\n    \n    # Segment to relocate\n    segment = selected_solution[start:end]\n    \n    # Remove the segment from the current position\n    new_solution = selected_solution[:start] + selected_solution[end:]\n    \n    # Choose a new position to insert the segment\n    insert_position = np.random.randint(0, len(new_solution) + 1)\n    \n    # Create the new neighbor solution\n    new_solution = new_solution[:insert_position] + segment + new_solution[insert_position:]\n    \n    return np.array(new_solution)\n\n",
          "score": [
               -217.04713601851455,
               0.2766856849193573
          ]
     },
     {
          "algorithm": "{Select the solution with the best objective (minimum cost in both objectives) from the archive, and apply a segment relocation strategy to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution, _ = min(archive, key=lambda x: (x[1][0], x[1][1]))\n\n    # Step 2: Generate a neighbor solution using segment relocation\n    n = len(best_solution)\n    neighbor_solution = best_solution.copy()\n\n    # Randomly choose two segments to relocate\n    segment_start = np.random.randint(0, n)\n    segment_length = np.random.randint(1, n // 2)  # Ensure the segment length is reasonable\n    segment_end = (segment_start + segment_length) % n\n    \n    # Extract the segment to relocate\n    segment = neighbor_solution[segment_start:segment_end]\n\n    # Remove the segment from the original position\n    remaining_nodes = np.concatenate((neighbor_solution[:segment_start], neighbor_solution[segment_end:]))\n    \n    # Choose a new position to insert the segment\n    insert_position = np.random.randint(0, len(remaining_nodes) + 1)\n    \n    # Create the new neighbor solution\n    neighbor_solution = np.insert(remaining_nodes, insert_position, segment)\n    \n    return neighbor_solution\n\n",
          "score": [
               -259.28473320718695,
               0.37558674812316895
          ]
     },
     {
          "algorithm": "{Select the solution with the best average performance in both objectives and perform a swap of two non-adjacent nodes to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]) / 2)[0]  # Minimize average of both objectives\n    n = len(best_solution)\n    \n    if n < 4:  # Not enough nodes to perform a meaningful operation\n        return best_solution\n    \n    # Step 2: Select two non-adjacent nodes to swap\n    while True:\n        i, j = np.random.choice(n, 2, replace=False)\n        if abs(i - j) > 1:  # Ensure they are non-adjacent\n            break\n            \n    # Step 3: Swap the selected nodes\n    new_solution = best_solution.copy()\n    new_solution[i], new_solution[j] = new_solution[j], new_solution[i]  # Perform the swap\n    \n    return new_solution\n\n",
          "score": [
               -200.12489645233973,
               0.2683253586292267
          ]
     },
     {
          "algorithm": "{Identify the solution with the best combined objective values and perform a swap of two non-adjacent nodes to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]  # Minimize both objectives simultaneously\n    n = len(best_solution)\n\n    # Select two non-adjacent nodes to swap\n    while True:\n        i, j = np.random.choice(n, 2, replace=False)\n        if abs(i - j) > 1:  # Ensure they are not adjacent\n            break\n\n    # Create a new solution by swapping the two selected nodes\n    new_solution = best_solution.copy()\n    new_solution[i], new_solution[j] = new_solution[j], new_solution[i]\n\n    return new_solution\n\n",
          "score": [
               -200.12452759490662,
               0.2647322118282318
          ]
     },
     {
          "algorithm": "{Choose the solution with the best trade-off in both objectives and apply a swap and reinsertion strategy.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]  # Minimizing the sum of objectives\n    best_tour = best_solution.copy()\n    \n    n = len(best_tour)\n\n    # Select two random indices to swap\n    idx1, idx2 = np.random.choice(n, size=2, replace=False)\n\n    # Swap the two nodes\n    best_tour[idx1], best_tour[idx2] = best_tour[idx2], best_tour[idx1]\n\n    # Apply reinsertion strategy: Remove one of the swapped nodes and reinsert it at a new position\n    node_to_reinsert = best_tour[idx1]\n    remaining_tour = np.delete(best_tour, idx1)\n\n    # Choose a new position to reinsert the node\n    insert_position = np.random.randint(0, len(remaining_tour) + 1)\n    new_tour = np.insert(remaining_tour, insert_position, node_to_reinsert)\n\n    return new_tour\n\n",
          "score": [
               -209.63279396857425,
               0.2849690318107605
          ]
     },
     {
          "algorithm": "{Identify the solution with the best trade-off between objectives and apply a segment swap strategy to generate a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    \n    n = len(best_solution)\n    if n < 4:  # Need at least 4 nodes to perform a swap\n        return best_solution\n    \n    # Select two random indices to swap\n    idx1, idx2 = np.random.choice(n, 2, replace=False)\n    \n    # Create a new neighbor solution by swapping the two selected nodes\n    neighbor_solution = best_solution.copy()\n    neighbor_solution[idx1], neighbor_solution[idx2] = neighbor_solution[idx2], neighbor_solution[idx1]\n    \n    return neighbor_solution\n\n",
          "score": [
               -197.45212349113336,
               0.26543164253234863
          ]
     },
     {
          "algorithm": "{Select a solution from the archive with the best combined distance in both objective spaces, then apply a reinsertion strategy to enhance the local search.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    \n    # Step 2: Create a neighbor solution using a reinsertion strategy\n    n = len(best_solution)\n    neighbor_solution = best_solution.copy()\n\n    # Step 3: Choose two random indices to perform reinsertion\n    i, j = np.random.choice(n, 2, replace=False)\n    \n    # Step 4: Remove the node at index i and insert it after index j\n    node_to_reinsert = neighbor_solution[i]\n    neighbor_solution = np.delete(neighbor_solution, i)\n    \n    # Ensure j is adjusted if i was before j\n    if i < j:\n        j -= 1\n        \n    neighbor_solution = np.insert(neighbor_solution, j, node_to_reinsert)\n    \n    return neighbor_solution\n\n",
          "score": [
               -205.7027311001587,
               0.3011893630027771
          ]
     },
     {
          "algorithm": "{Select the solution from the archive with the best trade-off between both objectives, then perform a swap of two non-adjacent nodes to generate a new tour.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Select a promising solution from the archive and generate a neighbor solution from it.\n\n    Args:\n    archive: List of (solution, objective) pairs. Each solution is a numpy array of node IDs.\n             Each objective is a tuple of two float values (negative_hypervolume, time_to_finish).\n    instance: Numpy array of shape (N, 4). Each row corresponds to a node and contains its coordinates in two 2D spaces: (x1, y1, x2, y2).\n    distance_matrix_1: Distance matrix in the first objective space.\n    distance_matrix_2: Distance matrix in the second objective space.\n\n    Returns:\n    A new neighbor solution (numpy array).\n    \"\"\"\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]  # Selecting based on combined objective values\n    neighbor_solution = best_solution.copy()\n    \n    n = len(neighbor_solution)\n    if n < 4:  # Not enough nodes to perform a meaningful operation\n        return neighbor_solution\n    \n    # Step 2: Select two non-adjacent nodes to swap\n    while True:\n        idx1 = np.random.randint(0, n)\n        idx2 = np.random.randint(0, n)\n        if abs(idx1 - idx2) > 1:  # Ensure they are not adjacent\n            break\n    \n    # Step 3: Swap the two selected nodes\n    neighbor_solution[idx1], neighbor_solution[idx2] = neighbor_solution[idx2], neighbor_solution[idx1]\n\n    return neighbor_solution\n\n",
          "score": [
               -197.01892702914728,
               0.2657632827758789
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off in objectives (least cost) and perform a swap between two non-adjacent nodes to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: x[1][0])[0]  # Minimize first objective\n    n = len(best_solution)\n    \n    # Step 2: Select two non-adjacent nodes to swap\n    i, j = np.random.choice(n, 2, replace=False)\n    while abs(i - j) <= 1:  # Ensure they are non-adjacent\n        j = np.random.choice(n)\n    \n    # Step 3: Create a new solution by swapping the two selected nodes\n    new_solution = best_solution.copy()\n    new_solution[i], new_solution[j] = new_solution[j], new_solution[i]\n    \n    return new_solution\n\n",
          "score": [
               -175.96479892511746,
               0.26551198959350586
          ]
     }
]