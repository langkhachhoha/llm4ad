[
     {
          "algorithm": "{Select the solution with the best trade-off in both objectives and apply a swap strategy focusing on improving the first objective.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution, _ = min(archive, key=lambda x: (x[1][0], x[1][1]))\n    neighbor_solution = best_solution.copy()\n\n    n = len(neighbor_solution)\n\n    # Step 1: Identify two nodes to swap\n    node1_index = np.random.randint(0, n)\n    node2_index = np.random.randint(0, n)\n    \n    # Ensure we don't swap the same node\n    while node1_index == node2_index:\n        node2_index = np.random.randint(0, n)\n\n    # Step 2: Swap the two nodes\n    neighbor_solution[node1_index], neighbor_solution[node2_index] = neighbor_solution[node2_index], neighbor_solution[node1_index]\n\n    return neighbor_solution\n\n",
          "score": [
               -179.3260886080809,
               0.2474287748336792
          ]
     },
     {
          "algorithm": "{Select the solution from the archive that has the best trade-off between objectives and apply a segment swap strategy that aims to minimize the distance in both objective spaces.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    best_tour = best_solution.copy()\n    \n    n = len(best_tour)\n\n    # Choose two segments to swap, ensuring they are non-overlapping\n    start1 = np.random.randint(0, n)\n    length1 = np.random.randint(1, n // 2)\n    end1 = min(start1 + length1, n)\n\n    start2 = np.random.randint(0, n)\n    length2 = np.random.randint(1, n // 2)\n    end2 = min(start2 + length2, n)\n\n    # Ensure segments do not overlap\n    while (start1 < end2 and start2 < end1):\n        start2 = np.random.randint(0, n)\n        length2 = np.random.randint(1, n // 2)\n        end2 = min(start2 + length2, n)\n\n    # Extract segments\n    segment1 = best_tour[start1:end1]\n    segment2 = best_tour[start2:end2]\n\n    # Create new tour by removing segments and inserting them in each other's positions\n    new_tour = best_tour.tolist()\n    new_tour = new_tour[:start1] + segment2.tolist() + new_tour[end1:]\n    new_tour = new_tour[:start2] + segment1.tolist() + new_tour[end2:]\n\n    return np.array(new_tour)\n\n",
          "score": [
               -378.67305408414734,
               0.6240417659282684
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off in both objectives, then apply a reinsertion strategy that replaces a node in the tour with another node not in the current segment.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    best_tour = best_solution.copy()\n    \n    n = len(best_tour)\n\n    # Step 1: Select a node to remove from the tour\n    node_to_remove_index = np.random.randint(0, n)\n    node_to_remove = best_tour[node_to_remove_index]\n\n    # Step 2: Select a node to insert into the tour from the remaining nodes\n    remaining_nodes = set(range(n)) - {node_to_remove}\n    node_to_insert = np.random.choice(list(remaining_nodes))\n\n    # Step 3: Create a new tour by replacing the removed node with the selected node\n    new_tour = np.delete(best_tour, node_to_remove_index)\n    insert_position = np.random.randint(0, n - 1)  # New position in the tour\n    new_tour = np.insert(new_tour, insert_position, node_to_insert)\n\n    return new_tour\n\n",
          "score": [
               -288.41302546557193,
               0.2967202365398407
          ]
     },
     {
          "algorithm": "{Select the solution with the highest diversity in objectives, then apply a segment relocation strategy by moving a continuous segment to a new position in the tour.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = max(archive, key=lambda x: (x[1][0] - x[1][1]))[0]\n    best_tour = best_solution.copy()\n    \n    n = len(best_tour)\n\n    # Step 2: Randomly select a segment of the tour to relocate\n    segment_start = np.random.randint(0, n)\n    segment_length = np.random.randint(1, n // 2)  # Length of the segment to move\n    segment_end = (segment_start + segment_length) % n\n\n    # Handle wrap-around\n    if segment_end < segment_start:\n        segment = np.concatenate((best_tour[segment_start:], best_tour[:segment_end]))\n    else:\n        segment = best_tour[segment_start:segment_end]\n\n    # Step 3: Remove the segment from the original tour\n    new_tour = np.delete(best_tour, np.s_[segment_start:segment_end])\n\n    # Step 4: Choose a new position to insert the segment\n    insert_position = np.random.randint(0, len(new_tour) + 1)\n    \n    # Step 5: Create the new tour by inserting the segment at the new position\n    new_tour = np.insert(new_tour, insert_position, segment)\n\n    return new_tour\n\n",
          "score": [
               -304.2891607464343,
               0.5393973886966705
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off between objectives and apply a segment relocation strategy to explore new configurations.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    n = len(best_solution)\n\n    # Step 1: Select a segment of the tour to relocate\n    segment_start = np.random.randint(0, n)\n    segment_length = np.random.randint(1, n // 2)  # Random length for segment\n    segment_end = (segment_start + segment_length) % n\n\n    # Extract the segment\n    if segment_start < segment_end:\n        segment = best_solution[segment_start:segment_end]\n    else:\n        segment = np.concatenate((best_solution[segment_start:], best_solution[:segment_end]))\n\n    # Step 2: Choose a new position to insert the segment\n    new_position = np.random.randint(0, n - segment_length + 1)\n\n    # Step 3: Create a new tour by relocating the segment\n    new_tour = np.delete(best_solution, np.s_[segment_start:segment_end], axis=0)\n    new_tour = np.insert(new_tour, new_position, segment)\n\n    return new_tour\n\n",
          "score": [
               -338.1195144755108,
               0.5588791966438293
          ]
     },
     {
          "algorithm": "{Select the solution from the archive that has the minimum combined distance in both objective spaces, and apply a segment relocation strategy to improve local structure by repositioning a segment of the tour.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    best_tour = best_solution.copy()\n    \n    n = len(best_tour)\n\n    # Select a segment to relocate\n    start = np.random.randint(0, n)\n    length = np.random.randint(1, n // 2)\n    end = min(start + length, n)\n\n    segment = best_tour[start:end]\n    remaining = np.concatenate((best_tour[:start], best_tour[end:]))\n\n    # Choose a new position to insert the segment\n    new_position = np.random.randint(0, len(remaining) + 1)\n\n    # Create new tour by inserting the segment at the new position\n    new_tour = np.concatenate((remaining[:new_position], segment, remaining[new_position:]))\n\n    return new_tour\n\n",
          "score": [
               -217.96302597666022,
               0.2793126106262207
          ]
     },
     {
          "algorithm": "{Select the solution with the best combined cost across both objectives and apply a segment relocation strategy that moves a sequence of nodes to a different position in the tour.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Select a promising solution from the archive and generate a neighbor solution from it.\n\n    Args:\n    archive: List of (solution, objective) pairs. Each solution is a numpy array of node IDs.\n             Each objective is a tuple of two float values (negative_hypervolume, time_to_finish).\n    instance: Numpy array of shape (N, 4). Each row corresponds to a node and contains its coordinates in two 2D spaces: (x1, y1, x2, y2).\n    distance_matrix_1: Distance matrix in the first objective space.\n    distance_matrix_2: Distance matrix in the second objective space.\n\n    Returns:\n    A new neighbor solution (numpy array).\n    \"\"\"\n    best_solution, _ = min(archive, key=lambda x: (x[1][0] + x[1][1]))\n    neighbor_solution = best_solution.copy()\n    \n    n = len(neighbor_solution)\n    \n    # Step 1: Select a segment of the tour to relocate\n    segment_start = np.random.randint(0, n)\n    segment_length = np.random.randint(1, n // 2)  # Length of the segment to move\n    segment_end = (segment_start + segment_length) % n\n    \n    if segment_end > segment_start:\n        segment = neighbor_solution[segment_start:segment_end]\n    else:\n        segment = np.concatenate((neighbor_solution[segment_start:], neighbor_solution[:segment_end]))\n    \n    # Step 2: Choose a new position to insert the segment\n    new_position = np.random.randint(0, n - segment_length + 1)\n    \n    # Step 3: Create a new tour by relocating the segment\n    new_tour = np.delete(neighbor_solution, np.s_[segment_start:segment_end])\n    new_tour = np.insert(new_tour, new_position, segment)\n    \n    return new_tour\n\n",
          "score": [
               -319.6335996740248,
               0.5484926402568817
          ]
     },
     {
          "algorithm": "{Select the solution with the best average cost across both objectives, then apply a swap strategy that targets nodes with the largest distances between them in the tour.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution, _ = min(archive, key=lambda x: (x[1][0] + x[1][1]) / 2)\n    neighbor_solution = best_solution.copy()\n    \n    n = len(neighbor_solution)\n\n    # Step 1: Identify the two nodes to swap\n    node_indices = np.arange(n)\n    np.random.shuffle(node_indices)\n    \n    # Select two indices to swap that are not adjacent\n    index1, index2 = node_indices[0], node_indices[1]\n    while abs(index1 - index2) <= 1 or (index1, index2) in [(0, n-1), (n-1, 0)]:\n        np.random.shuffle(node_indices)\n        index1, index2 = node_indices[0], node_indices[1]\n\n    # Step 2: Swap the two nodes in the tour\n    neighbor_solution[index1], neighbor_solution[index2] = neighbor_solution[index2], neighbor_solution[index1]\n    \n    return neighbor_solution\n\n",
          "score": [
               -197.27056140496956,
               0.2535274624824524
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off in the first objective, then apply a swap strategy to improve the tour based on local distance metrics.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: x[1][0])[0]  # Minimizing the first objective\n    best_tour = best_solution.copy()\n    \n    n = len(best_tour)\n\n    # Step 1: Identify two nodes to swap based on the distance metrics\n    node_a = np.random.randint(0, n)\n    node_b = np.random.randint(0, n)\n    \n    while node_b == node_a:  # Ensure we select different nodes\n        node_b = np.random.randint(0, n)\n\n    # Step 2: Create a new tour by swapping the selected nodes\n    new_tour = best_tour.copy()\n    new_tour[node_a], new_tour[node_b] = new_tour[node_b], new_tour[node_a]\n    \n    return new_tour\n\n",
          "score": [
               -181.24261446556696,
               0.24894371628761292
          ]
     },
     {
          "algorithm": "{Select the solution with the best overall performance in both objectives and apply a swap strategy that enhances diversity in the tour.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    n = len(best_solution)\n\n    # Step 1: Select two random indices to swap\n    idx1, idx2 = np.random.choice(n, 2, replace=False)\n\n    # Step 2: Swap the nodes at the selected indices\n    new_tour = best_solution.copy()\n    new_tour[idx1], new_tour[idx2] = new_tour[idx2], new_tour[idx1]\n\n    return new_tour\n\n",
          "score": [
               -205.58515559163186,
               0.266218364238739
          ]
     }
]