[
     {
          "algorithm": "{The algorithm selects the solution with the best objective score from the archive, identifies nodes with the least contribution to the tour length, and performs a segment relocation to create a new neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: x[1])  # Select the solution with the best (lowest) objectives\n    best_tour = best_solution[0]\n    \n    # Step 2: Identify a segment to relocate\n    N = len(best_tour)\n    segment_start = np.random.randint(0, N)\n    segment_length = np.random.randint(1, N // 2)  # Randomly choose a segment length\n    segment_end = (segment_start + segment_length) % N\n    segment = best_tour[segment_start:segment_end]\n    \n    # Step 3: Remove the segment from the tour\n    new_tour = np.concatenate((best_tour[:segment_start], best_tour[segment_end:]))\n    \n    # Step 4: Select a new position to insert the segment\n    insert_position = np.random.randint(0, len(new_tour) + 1)\n    \n    # Step 5: Insert the segment into the new position\n    neighbor_solution = np.insert(new_tour, insert_position, segment)\n    \n    return neighbor_solution\n\n",
          "score": [
               -242.01204420258526,
               0.3843860626220703
          ]
     },
     {
          "algorithm": "{The algorithm selects the best solution based on the minimum sum of distances from the archive, then performs a segment relocation by moving a segment of the tour to a new position.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    \n    # Step 2: Perform segment relocation\n    n = len(best_solution)\n    if n < 4:\n        return best_solution  # Not enough nodes to perform a meaningful operation\n\n    # Select two random indices for the segment to relocate\n    start = np.random.randint(0, n - 2)\n    end = np.random.randint(start + 2, n)  # Ensure at least two nodes in the segment\n\n    # Extract the segment to be relocated\n    segment = best_solution[start:end]\n    \n    # Remove the segment from the original solution\n    new_tour = np.concatenate((best_solution[:start], best_solution[end:]))\n    \n    # Choose a random position to insert the segment back into the tour\n    insert_position = np.random.randint(0, len(new_tour) + 1)\n    \n    # Create the new neighbor solution by inserting the segment\n    new_tour = np.insert(new_tour, insert_position, segment)\n    \n    return new_tour\n\n",
          "score": [
               -213.40207226574844,
               0.2961995601654053
          ]
     },
     {
          "algorithm": "{Select the solution with the best (lowest) combined distance in both objective spaces and perform a segment relocation to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1], x[1]))[0]\n    \n    # Step 2: Generate a neighbor solution using segment relocation\n    n = len(best_solution)\n    new_solution = best_solution.copy()\n    \n    # Randomly select two segments from the tour to relocate\n    segment_start = np.random.randint(0, n)\n    segment_end = np.random.randint(segment_start + 1, n + 1)  # Ensure at least one element in the segment\n    \n    # Extract the segment to relocate\n    segment = new_solution[segment_start:segment_end]\n    \n    # Remove the segment from the original solution\n    new_solution = np.delete(new_solution, np.s_[segment_start:segment_end])\n    \n    # Randomly choose a new position to insert the segment\n    new_position = np.random.randint(0, len(new_solution) + 1)\n    \n    # Insert the segment at the new position\n    new_solution = np.insert(new_solution, new_position, segment)\n    \n    return new_solution\n\n",
          "score": [
               -215.57158854549675,
               0.3211843967437744
          ]
     },
     {
          "algorithm": "{Select the solution with the best overall performance in both objectives and apply a segment relocation operator to generate a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0], x[1][1]))[0]\n    n = len(best_solution)\n    \n    # Perform segment relocation\n    neighbor_solution = best_solution.copy()\n    \n    # Randomly select a segment to relocate\n    start = np.random.randint(0, n)\n    length = np.random.randint(1, n // 2)  # segment length\n    end = (start + length) % n\n    \n    # Extract the segment\n    segment = neighbor_solution[start:end]\n    \n    # Find a position to insert the segment\n    insert_position = np.random.randint(0, n - length)\n    \n    # Create the new neighbor solution\n    if insert_position < start:\n        # Insert before the segment\n        new_solution = np.concatenate((neighbor_solution[:insert_position], segment, neighbor_solution[insert_position:start], neighbor_solution[end:]))\n    else:\n        # Insert after the segment\n        new_solution = np.concatenate((neighbor_solution[:start], neighbor_solution[end:insert_position], segment, neighbor_solution[insert_position:]))\n    \n    return new_solution\n\n",
          "score": [
               -322.77502836800574,
               0.6280213892459869
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off between objectives using a weighted sum, then apply a swap strategy to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Select a promising solution from the archive and generate a neighbor solution from it.\n\n    Args:\n    archive: List of (solution, objective) pairs. Each solution is a numpy array of node IDs.\n             Each objective is a tuple of two float values (negative_hypervolume, time_to_finish).\n    instance: Numpy array of shape (N, 4). Each row corresponds to a node and contains its coordinates in two 2D spaces: (x1, y1, x2, y2).\n    distance_matrix_1: Distance matrix in the first objective space.\n    distance_matrix_2: Distance matrix in the second objective space.\n\n    Returns:\n    A new neighbor solution (numpy array).\n    \"\"\"\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]  # Minimize the weighted sum of objectives\n    n = len(best_solution)\n\n    # Select two distinct nodes to swap\n    swap_indices = np.random.choice(n, size=2, replace=False)\n    \n    # Create a new neighbor solution by swapping the two selected nodes\n    new_solution = best_solution.copy()\n    new_solution[swap_indices[0]], new_solution[swap_indices[1]] = new_solution[swap_indices[1]], new_solution[swap_indices[0]]\n\n    return new_solution\n\n",
          "score": [
               -204.04688900706535,
               0.2581450939178467
          ]
     },
     {
          "algorithm": "{Select the solution with the best performance in the second objective and perform a swap between two non-adjacent nodes to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Select a promising solution from the archive and generate a neighbor solution from it.\n\n    Args:\n    archive: List of (solution, objective) pairs. Each solution is a numpy array of node IDs.\n             Each objective is a tuple of two float values (negative_hypervolume, time_to_finish).\n    instance: Numpy array of shape (N, 4). Each row corresponds to a node and contains its coordinates in two 2D spaces: (x1, y1, x2, y2).\n    distance_matrix_1: Distance matrix in the first objective space.\n    distance_matrix_2: Distance matrix in the second objective space.\n\n    Returns:\n    A new neighbor solution (numpy array).\n    \"\"\"\n    best_solution = min(archive, key=lambda x: x[1][1])[0]  # Minimize the second objective\n    n = len(best_solution)\n\n    if n < 4:  # Need at least 4 nodes to perform a meaningful swap\n        return best_solution.copy()\n\n    # Randomly select two non-adjacent nodes to swap\n    idx1 = np.random.randint(0, n)\n    idx2 = np.random.randint(0, n)\n\n    while abs(idx1 - idx2) < 2:  # Ensure they are not adjacent\n        idx2 = np.random.randint(0, n)\n\n    # Create a new neighbor solution by swapping the two selected nodes\n    new_solution = best_solution.copy()\n    new_solution[idx1], new_solution[idx2] = new_solution[idx2], new_solution[idx1]\n\n    return new_solution\n\n",
          "score": [
               -175.18755411053067,
               0.24850541353225708
          ]
     },
     {
          "algorithm": "{Select the solution with the best performance in the second objective space and apply a swap operator to generate a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: x[1][1])[0]\n    n = len(best_solution)\n    \n    # Create a copy for manipulation\n    neighbor_solution = best_solution.copy()\n    \n    # Select two distinct indices for swapping\n    i, j = np.random.choice(n, 2, replace=False)\n    \n    # Swap the two selected nodes\n    neighbor_solution[i], neighbor_solution[j] = neighbor_solution[j], neighbor_solution[i]\n\n    return neighbor_solution\n\n",
          "score": [
               -181.03405349101044,
               0.25469139218330383
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off in terms of both objectives and perform a swap of two non-adjacent nodes to generate a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    n = len(best_solution)\n\n    # Ensure we have at least 4 nodes to perform a meaningful swap\n    if n < 4:\n        return best_solution.copy()\n\n    # Select two non-adjacent nodes to swap\n    node_1 = np.random.randint(0, n)\n    while True:\n        node_2 = np.random.randint(0, n)\n        if abs(node_1 - node_2) > 1 and (node_1, node_2) not in [(0, n-1), (n-1, 0)]:  # Ensure non-adjacency\n            break\n\n    # Create a neighbor solution by swapping the two nodes\n    neighbor_solution = best_solution.copy()\n    neighbor_solution[node_1], neighbor_solution[node_2] = neighbor_solution[node_2], neighbor_solution[node_1]\n\n    return neighbor_solution\n\n",
          "score": [
               -201.97461218614353,
               0.25730791687965393
          ]
     },
     {
          "algorithm": "{Select the solution with the best performance in terms of both objectives, then perform a swap of two non-adjacent nodes to generate a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Select a promising solution from the archive and generate a neighbor solution from it.\n\n    Args:\n    archive: List of (solution, objective) pairs. Each solution is a numpy array of node IDs.\n             Each objective is a tuple of two float values (negative_hypervolume, time_to_finish).\n    instance: Numpy array of shape (N, 4). Each row corresponds to a node and contains its coordinates in two 2D spaces: (x1, y1, x2, y2).\n    distance_matrix_1: Distance matrix in the first objective space.\n    distance_matrix_2: Distance matrix in the second objective space.\n\n    Returns:\n    A new neighbor solution (numpy array).\n    \"\"\"\n    best_solution = min(archive, key=lambda x: (x[1][0], x[1][1]))[0]\n\n    n = len(best_solution)\n    if n < 4:  # Need at least 4 nodes to perform a meaningful swap\n        return best_solution.copy()\n\n    # Select two non-adjacent nodes to swap\n    while True:\n        idx1, idx2 = np.random.choice(n, 2, replace=False)\n        if abs(idx1 - idx2) > 1 and not (idx1 == 0 and idx2 == n - 1):  # Ensure they are non-adjacent\n            break\n\n    # Create a new solution by swapping the selected nodes\n    new_solution = best_solution.copy()\n    new_solution[idx1], new_solution[idx2] = new_solution[idx2], new_solution[idx1]\n\n    return new_solution\n\n",
          "score": [
               -180.19272848574025,
               0.256020724773407
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off between both objectives (smallest combined cost), then perform a swap operation between two nodes that are not adjacent in the tour to create a new neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Select a promising solution from the archive and generate a neighbor solution from it.\n\n    Args:\n    archive: List of (solution, objective) pairs. Each solution is a numpy array of node IDs.\n             Each objective is a tuple of two float values (negative_hypervolume, time_to_finish).\n    instance: Numpy array of shape (N, 4). Each row corresponds to a node and contains its coordinates in two 2D spaces: (x1, y1, x2, y2).\n    distance_matrix_1: Distance matrix in the first objective space.\n    distance_matrix_2: Distance matrix in the second objective space.\n\n    Returns:\n    A new neighbor solution (numpy array).\n    \"\"\"\n    sorted_archive = sorted(archive, key=lambda x: x[1][0] + x[1][1])\n    \n    # Select the best solution based on the combined objectives\n    best_solution, _ = sorted_archive[0]\n    \n    # Convert to list for manipulation\n    best_solution = best_solution.tolist()\n    n = len(best_solution)\n    \n    # Select two non-adjacent nodes to swap\n    i, j = np.random.choice(n, 2, replace=False)\n    \n    # Ensure i and j are not adjacent\n    while abs(i - j) == 1 or (i == 0 and j == n - 1) or (j == 0 and i == n - 1):\n        i, j = np.random.choice(n, 2, replace=False)\n    \n    # Swap the selected nodes\n    best_solution[i], best_solution[j] = best_solution[j], best_solution[i]\n    \n    return np.array(best_solution)\n\n",
          "score": [
               -198.55407062804915,
               0.269880473613739
          ]
     }
]