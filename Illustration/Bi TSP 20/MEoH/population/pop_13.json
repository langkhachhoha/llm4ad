[
     {
          "algorithm": "{The algorithm selects the solution with the best objective score from the archive, identifies nodes with the least contribution to the tour length, and performs a segment relocation to create a new neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: x[1])  # Select the solution with the best (lowest) objectives\n    best_tour = best_solution[0]\n    \n    # Step 2: Identify a segment to relocate\n    N = len(best_tour)\n    segment_start = np.random.randint(0, N)\n    segment_length = np.random.randint(1, N // 2)  # Randomly choose a segment length\n    segment_end = (segment_start + segment_length) % N\n    segment = best_tour[segment_start:segment_end]\n    \n    # Step 3: Remove the segment from the tour\n    new_tour = np.concatenate((best_tour[:segment_start], best_tour[segment_end:]))\n    \n    # Step 4: Select a new position to insert the segment\n    insert_position = np.random.randint(0, len(new_tour) + 1)\n    \n    # Step 5: Insert the segment into the new position\n    neighbor_solution = np.insert(new_tour, insert_position, segment)\n    \n    return neighbor_solution\n\n",
          "score": [
               -242.01204420258526,
               0.3843860626220703
          ]
     },
     {
          "algorithm": "{Select the solution with the lowest combined distance and perform a segment relocation strategy to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    n = len(best_solution)\n\n    # Ensure we have enough nodes to perform a meaningful transformation\n    if n < 4:\n        return best_solution.copy()\n\n    # Select a segment of the tour to relocate\n    start_index = np.random.randint(0, n)\n    segment_length = np.random.randint(1, n // 2)  # Length of the segment to relocate\n    end_index = (start_index + segment_length) % n\n\n    # Extract the segment to relocate\n    if start_index < end_index:\n        segment = best_solution[start_index:end_index]\n    else:\n        segment = np.concatenate((best_solution[start_index:], best_solution[:end_index]))\n\n    # Select a new position to insert the segment\n    new_position = np.random.randint(0, n - segment_length)  # New position must fit the segment\n\n    # Create a neighbor solution by relocating the segment\n    new_solution = np.delete(best_solution, np.s_[start_index:end_index])  # Remove the segment\n    new_solution = np.insert(new_solution, new_position, segment)  # Insert the segment at the new position\n\n    return new_solution\n\n",
          "score": [
               -351.45000565155146,
               0.9757499396800995
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off in terms of both objectives, then perform a segment relocation by moving a contiguous segment of nodes to a new position in the tour.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    n = len(best_solution)\n\n    # Ensure we have at least 3 nodes to perform a meaningful segment relocation\n    if n < 3:\n        return best_solution.copy()\n\n    # Select a segment of nodes to relocate\n    start = np.random.randint(0, n - 1)\n    end = np.random.randint(start + 1, n)\n\n    # Select a new position to insert the segment\n    new_position = np.random.randint(0, n - (end - start))\n\n    # Create a neighbor solution by relocating the segment\n    neighbor_solution = best_solution.copy()\n    segment = neighbor_solution[start:end]\n    \n    # Remove the segment from its original position\n    neighbor_solution = np.delete(neighbor_solution, np.s_[start:end])\n\n    # Insert the segment at the new position\n    neighbor_solution = np.insert(neighbor_solution, new_position, segment)\n\n    return neighbor_solution\n\n",
          "score": [
               -221.23119036392802,
               0.30721086263656616
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off in terms of both objectives and perform a swap of two non-adjacent nodes to generate a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    n = len(best_solution)\n\n    # Ensure we have at least 4 nodes to perform a meaningful swap\n    if n < 4:\n        return best_solution.copy()\n\n    # Select two non-adjacent nodes to swap\n    node_1 = np.random.randint(0, n)\n    while True:\n        node_2 = np.random.randint(0, n)\n        if abs(node_1 - node_2) > 1 and (node_1, node_2) not in [(0, n-1), (n-1, 0)]:  # Ensure non-adjacency\n            break\n\n    # Create a neighbor solution by swapping the two nodes\n    neighbor_solution = best_solution.copy()\n    neighbor_solution[node_1], neighbor_solution[node_2] = neighbor_solution[node_2], neighbor_solution[node_1]\n\n    return neighbor_solution\n\n",
          "score": [
               -201.97461218614353,
               0.25730791687965393
          ]
     },
     {
          "algorithm": "{Select the solution with the best overall performance in both objectives and apply a segment relocation operator to generate a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0], x[1][1]))[0]\n    n = len(best_solution)\n    \n    # Perform segment relocation\n    neighbor_solution = best_solution.copy()\n    \n    # Randomly select a segment to relocate\n    start = np.random.randint(0, n)\n    length = np.random.randint(1, n // 2)  # segment length\n    end = (start + length) % n\n    \n    # Extract the segment\n    segment = neighbor_solution[start:end]\n    \n    # Find a position to insert the segment\n    insert_position = np.random.randint(0, n - length)\n    \n    # Create the new neighbor solution\n    if insert_position < start:\n        # Insert before the segment\n        new_solution = np.concatenate((neighbor_solution[:insert_position], segment, neighbor_solution[insert_position:start], neighbor_solution[end:]))\n    else:\n        # Insert after the segment\n        new_solution = np.concatenate((neighbor_solution[:start], neighbor_solution[end:insert_position], segment, neighbor_solution[insert_position:]))\n    \n    return new_solution\n\n",
          "score": [
               -322.77502836800574,
               0.6280213892459869
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off in terms of both objectives, then perform a swap of two non-adjacent nodes to explore new configurations.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    n = len(best_solution)\n\n    # Ensure we have at least 4 nodes to perform a meaningful swap\n    if n < 4:\n        return best_solution.copy()\n\n    # Select two non-adjacent nodes to swap\n    first_node = np.random.randint(0, n)\n    second_node = (first_node + np.random.randint(2, n)) % n  # Ensure non-adjacency\n\n    # Create a neighbor solution by swapping the two selected nodes\n    neighbor_solution = best_solution.copy()\n    neighbor_solution[first_node], neighbor_solution[second_node] = neighbor_solution[second_node], neighbor_solution[first_node]\n\n    return neighbor_solution\n\n",
          "score": [
               -201.85943677045586,
               0.24887576699256897
          ]
     },
     {
          "algorithm": "{Select the solution with the best performance in the first objective, then apply a segment relocation strategy to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: x[1][0])[0]  # Minimize the first objective\n    n = len(best_solution)\n\n    if n < 4:  # Need at least 4 nodes to perform a meaningful relocation\n        return best_solution.copy()\n\n    # Select a segment of the tour to relocate\n    start_idx = np.random.randint(0, n)\n    segment_length = np.random.randint(2, n // 2)  # Length of the segment to relocate\n    end_idx = (start_idx + segment_length) % n\n\n    # Extract the segment and the remaining nodes\n    segment = best_solution[start_idx:end_idx].copy()\n    remaining_nodes = np.concatenate((best_solution[:start_idx], best_solution[end_idx:]))\n\n    # Choose a new position to insert the segment\n    new_position = np.random.randint(0, len(remaining_nodes) + 1)\n\n    # Create a new neighbor solution by relocating the segment\n    new_solution = np.insert(remaining_nodes, new_position, segment)\n\n    return new_solution\n\n",
          "score": [
               -247.00569187506397,
               0.39495742321014404
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off between objectives using a weighted sum, then apply a swap strategy to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]  # Minimize the weighted sum of objectives\n    n = len(best_solution)\n\n    # Select two distinct nodes to swap\n    swap_indices = np.random.choice(n, size=2, replace=False)\n    \n    # Create a new neighbor solution by swapping the two selected nodes\n    new_solution = best_solution.copy()\n    new_solution[swap_indices[0]], new_solution[swap_indices[1]] = new_solution[swap_indices[1]], new_solution[swap_indices[0]]\n\n    return new_solution\n\n",
          "score": [
               -204.04688900706535,
               0.2581450939178467
          ]
     },
     {
          "algorithm": "{Select the solution with the best trade-off in the second objective, then perform a swap operation between two non-adjacent nodes.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: x[1][1])[0]  # Select based on the second objective\n    n = len(best_solution)\n\n    if n < 4:  # Need at least 4 nodes to perform a meaningful swap\n        return best_solution.copy()\n\n    # Randomly select two non-adjacent nodes to swap\n    idx1 = np.random.randint(0, n)\n    idx2 = np.random.randint(0, n)\n\n    while abs(idx1 - idx2) <= 1 or (idx1 == 0 and idx2 == n - 1) or (idx2 == 0 and idx1 == n - 1):\n        idx2 = np.random.randint(0, n)\n\n    # Create a neighbor solution by swapping the two nodes\n    neighbor_solution = best_solution.copy()\n    neighbor_solution[idx1], neighbor_solution[idx2] = neighbor_solution[idx2], neighbor_solution[idx1]\n\n    return neighbor_solution\n\n",
          "score": [
               -179.99620412167684,
               0.24786633253097534
          ]
     },
     {
          "algorithm": "{The algorithm selects the solution with the best combined objective values, then applies a segment reversal operation to create a neighbor solution.}",
          "function": "def select_neighbor(archive: List[Tuple[np.ndarray, Tuple[float, float]]], instance: np.ndarray, distance_matrix_1: np.ndarray, distance_matrix_2: np.ndarray) -> np.ndarray:\n    best_solution = min(archive, key=lambda x: (x[1][0] + x[1][1]))[0]\n    n = len(best_solution)\n    \n    if n < 4:  # Need at least 4 nodes to perform a meaningful operation\n        return best_solution.copy()\n\n    # Select two random indices to define the segment to reverse\n    start = np.random.randint(0, n - 2)\n    end = np.random.randint(start + 2, n)  # Ensure at least two nodes in the segment\n\n    # Extract and reverse the segment\n    segment = best_solution[start:end][::-1]\n    \n    # Create the new neighbor solution by combining the unchanged parts with the reversed segment\n    new_tour = np.concatenate((best_solution[:start], segment, best_solution[end:]))\n    \n    return new_tour\n\n",
          "score": [
               -218.22357591352107,
               0.26277053356170654
          ]
     }
]